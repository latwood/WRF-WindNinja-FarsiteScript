The basic idea of this script is that running /include/buildEverything.sh downloads, unpacks, and builds all required libraries and required separate applications, writes a required cmake file to update the paths to all these dependencies, and builds the WRF-WindNinja_FarsiteScript, putting the executable in the bin/ directory. Then you run the script from the command line without a proper input file to get help on what is required in the input file, then run the script from the command line with a path to the required input file to run the script.

If there is anything wrong with the inputs, the input parser should catch the problem and warn if input data is off or more is required. The script also has error checking to stop at any point that it runs into trouble, so if you have problems without getting understandable errors, somehow you've caused an edge case where the programmers need to add some more error checking.

If there is anything wrong with running buildEverything.sh, it should stop and warn where in the process an error has occured so you can go into the file and edit the download source links or any other required unpacked filenames that might have changed. Running buildEverything.sh multiple times should warn if different files are already found so it avoids redoing steps in the process unless you delete files.

The example input files should now run simply by modifying the base paths in each variable to the location of the main WRF-WindNinja-FarsiteScript directory. At some point, a utility script will be written that can be called by buildEverything.sh that will modify all these base paths for the user so examples can be immediately run without any changes to variables, but the WRF-WindNinja-FarsiteScript code itself will need a lot of cleanup of the required input variables and input variable explanations before this can be done. This means that the current examples should work as expected simply by modifying pathnames to some of the variables, but care should be taken when trying to completely change these variables or change what variable combinations are used as the WRF-WindNinja-FarsiteScript still needs some work on how it handles some stuff with these variables.

Of the current examples, the expected behavior for firstRunCougarCreekFire.txt is as follows: firstRunCougarCreekFire.txt will run all the way to completion, and you can use the resulting a-originalInputs/cougarCreekFire.lcp with its corresponding projection file and a-originalInputs/colorInput.CLR files in farsite4 from firelab.org to view the lcp of the example. You can then take info from the finalOutputs folder to view the resulting fire stuff in said farsite4. Eventually will move on to use flammap6 instead of farsite4 for viewing.

For other current examples, the code will stop at farsite, as there are not enough wind files for said cases, but they will show output resulting empty folders as it attempts to run multiple separate fires for different ignition files on a single set of wind data. Just there are not enough wind files (min of 1 day's worth before the fire) for farsite to actually run with the inputs provided by the outputs of everything else (not enough wrf files as input to the entire script).


If you have any trouble using this script or have any suggestions, email the original developer, Loren Atwood, at pianotocador@gmail.com

